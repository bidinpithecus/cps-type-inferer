-- Auto-generated by Main.hs
-- This code works only for Church Encoding expressions
-- It will compute the generated CPS translated expression Church enconding

cbn k = let succ(k0) = let v0(n, k1) = let v1(s, k2) = let v2(z, k3) = let k4(v3) = let v4(k5) = let k6(v5) = let v6(k7) = z(k7) in v5(v6, k5) in (let k8(v7) = let v8(k9) = s(k9) in v7(v8, k6) in n(k8)) in v3(v4, k3) in s(k4) in k2(v2) in k1(v1) in k0(v0) in (let one(k10) = let v9(s, k11) = let v10(z, k12) = let k13(v11) = let v12(k14) = z(k14) in v11(v12, k12) in s(k13) in k11(v10) in k10(v9) in (let k15(v13) = let v14(k16) = one(k16) in v13(v14, k) in succ(k15)))

cbv k = let k0(succ) = let k10(one) = let k15(v13) = let k16(v14) = v13(v14, k) in k16(one) in k15(succ) in (let v9(s, k11) = let v10(z, k12) = let k13(v11) = let k14(v12) = v11(v12, k12) in k14(z) in k13(s) in k11(v10) in k10(v9)) in (let v0(n, k1) = let v1(s, k2) = let v2(z, k3) = let k4(v3) = let k5(v4) = v3(v4, k3) in (let k6(v5) = let k7(v6) = v5(v6, k5) in k7(z) in (let k8(v7) = let k9(v8) = v7(v8, k6) in k9(s) in k8(n))) in k4(s) in k2(v2) in k1(v1) in k0(v0))

----------------

inc_cbv :: (Int, Int -> r) -> r
inc_cbv (n, k) = k (1 + n)

test_cbv = 
    cbv (\f -> f (inc_cbv, \x -> x (0, id)))

thunk :: a -> (a -> r) -> r
thunk x k = k x

inc_cbn :: (Int -> r, Int) -> r
inc_cbn (k, n) =
    inc_cbv (n, k)

test_cbn =
    cbn (\f -> f (thunk inc_cbn, \x -> x (id, 0)))

main :: IO ()
main = do
  print $ (test_cbn, test_cbv)
