-- Auto-generated by Main.hs
-- This code works only for Church Encoding expressions
-- It will compute the generated CPS translated expression Church enconding

cbn k = let zero(k0) = let v0(f, k1) = let v1(x, k2) = x(k2) in k1(v1) in k0(v0) in (let one(k3) = let v2(f, k4) = let v3(x, k5) = let k6(v4) = let v5(k7) = x(k7) in v4(v5, k5) in f(k6) in k4(v3) in k3(v2) in (let succ(k8) = let v6(n, k9) = let v7(f, k10) = let v8(x, k11) = let k12(v9) = let v10(k13) = let k14(v11) = let v12(k15) = x(k15) in v11(v12, k13) in (let k16(v13) = let v14(k17) = f(k17) in v13(v14, k14) in n(k16)) in v9(v10, k11) in f(k12) in k10(v8) in k9(v7) in k8(v6) in (let plus(k18) = let v15(m, k19) = let v16(n, k20) = let v17(f, k21) = let v18(x, k22) = let k23(v19) = let v20(k24) = let k27(v23) = let v24(k28) = x(k28) in v23(v24, k24) in (let k29(v25) = let v26(k30) = f(k30) in v25(v26, k27) in n(k29)) in v19(v20, k22) in (let k25(v21) = let v22(k26) = f(k26) in v21(v22, k23) in m(k25)) in k21(v18) in k20(v17) in k19(v16) in k18(v15) in (let pair(k31) = let v27(a, k32) = let v28(b, k33) = let v29(f, k34) = let k35(v30) = let v31(k36) = b(k36) in v30(v31, k34) in (let k37(v32) = let v33(k38) = a(k38) in v32(v33, k35) in f(k37)) in k33(v29) in k32(v28) in k31(v27) in (let fst(k39) = let v34(p, k40) = let k41(v35) = let v36(k42) = let v37(x, k43) = let v38(y, k44) = x(k44) in k43(v38) in k42(v37) in v35(v36, k40) in p(k41) in k39(v34) in (let snd(k45) = let v39(p, k46) = let k47(v40) = let v41(k48) = let v42(x, k49) = let v43(y, k50) = y(k50) in k49(v43) in k48(v42) in v40(v41, k46) in p(k47) in k45(v39) in (let two(k51) = let k52(v44) = let v45(k53) = one(k53) in v44(v45, k51) in succ(k52) in (let three(k54) = let k55(v46) = let v47(k56) = two(k56) in v46(v47, k54) in succ(k55) in (let four(k57) = let k58(v48) = let v49(k59) = three(k59) in v48(v49, k57) in succ(k58) in (let five(k60) = let k61(v50) = let v51(k62) = four(k62) in v50(v51, k60) in succ(k61) in (let six(k63) = let k64(v52) = let v53(k65) = five(k65) in v52(v53, k63) in succ(k64) in (let seven(k66) = let k67(v54) = let v55(k68) = six(k68) in v54(v55, k66) in succ(k67) in (let eight(k69) = let k70(v56) = let v57(k71) = seven(k71) in v56(v57, k69) in succ(k70) in (let nine(k72) = let k73(v58) = let v59(k74) = eight(k74) in v58(v59, k72) in succ(k73) in (let ten(k75) = let k76(v60) = let v61(k77) = nine(k77) in v60(v61, k75) in succ(k76) in (let fib_aux(k78) = let v62(p, k79) = let k80(v63) = let v64(k81) = let k86(v69) = let v70(k87) = let k92(v75) = let v76(k93) = p(k93) in v75(v76, k87) in snd(k92) in v69(v70, k81) in (let k88(v71) = let v72(k89) = let k90(v73) = let v74(k91) = p(k91) in v73(v74, k89) in fst(k90) in v71(v72, k86) in plus(k88)) in v63(v64, k79) in (let k82(v65) = let v66(k83) = let k84(v67) = let v68(k85) = p(k85) in v67(v68, k83) in snd(k84) in v65(v66, k80) in pair(k82)) in k78(v62) in (let fib(k94) = let v77(n, k95) = let k96(v78) = let v79(k97) = let k98(v80) = let v81(k99) = let k102(v84) = let v85(k103) = one(k103) in v84(v85, k99) in (let k104(v86) = let v87(k105) = zero(k105) in v86(v87, k102) in pair(k104)) in v80(v81, k97) in (let k100(v82) = let v83(k101) = fib_aux(k101) in v82(v83, k98) in n(k100)) in v78(v79, k95) in fst(k96) in k94(v77) in (let k106(v88) = let v89(k107) = ten(k107) in v88(v89, k) in fib(k106)))))))))))))))))))

cbv k = let k0(zero) = let k3(one) = let k8(succ) = let k18(plus) = let k31(pair) = let k39(fst) = let k45(snd) = let k51(two) = let k54(three) = let k57(four) = let k60(five) = let k63(six) = let k66(seven) = let k69(eight) = let k72(nine) = let k75(ten) = let k78(fib_aux) = let k94(fib) = let k106(v88) = let k107(v89) = v88(v89, k) in k107(ten) in k106(fib) in (let v77(n, k95) = let k96(v78) = let k97(v79) = v78(v79, k95) in (let k98(v80) = let k99(v81) = v80(v81, k97) in (let k102(v84) = let k103(v85) = v84(v85, k99) in k103(one) in (let k104(v86) = let k105(v87) = v86(v87, k102) in k105(zero) in k104(pair))) in (let k100(v82) = let k101(v83) = v82(v83, k98) in k101(fib_aux) in k100(n))) in k96(fst) in k94(v77)) in (let v62(p, k79) = let k80(v63) = let k81(v64) = v63(v64, k79) in (let k86(v69) = let k87(v70) = v69(v70, k81) in (let k92(v75) = let k93(v76) = v75(v76, k87) in k93(p) in k92(snd)) in (let k88(v71) = let k89(v72) = v71(v72, k86) in (let k90(v73) = let k91(v74) = v73(v74, k89) in k91(p) in k90(fst)) in k88(plus))) in (let k82(v65) = let k83(v66) = v65(v66, k80) in (let k84(v67) = let k85(v68) = v67(v68, k83) in k85(p) in k84(snd)) in k82(pair)) in k78(v62)) in (let k76(v60) = let k77(v61) = v60(v61, k75) in k77(nine) in k76(succ)) in (let k73(v58) = let k74(v59) = v58(v59, k72) in k74(eight) in k73(succ)) in (let k70(v56) = let k71(v57) = v56(v57, k69) in k71(seven) in k70(succ)) in (let k67(v54) = let k68(v55) = v54(v55, k66) in k68(six) in k67(succ)) in (let k64(v52) = let k65(v53) = v52(v53, k63) in k65(five) in k64(succ)) in (let k61(v50) = let k62(v51) = v50(v51, k60) in k62(four) in k61(succ)) in (let k58(v48) = let k59(v49) = v48(v49, k57) in k59(three) in k58(succ)) in (let k55(v46) = let k56(v47) = v46(v47, k54) in k56(two) in k55(succ)) in (let k52(v44) = let k53(v45) = v44(v45, k51) in k53(one) in k52(succ)) in (let v39(p, k46) = let k47(v40) = let k48(v41) = v40(v41, k46) in (let v42(x, k49) = let v43(y, k50) = k50(y) in k49(v43) in k48(v42)) in k47(p) in k45(v39)) in (let v34(p, k40) = let k41(v35) = let k42(v36) = v35(v36, k40) in (let v37(x, k43) = let v38(y, k44) = k44(x) in k43(v38) in k42(v37)) in k41(p) in k39(v34)) in (let v27(a, k32) = let v28(b, k33) = let v29(f, k34) = let k35(v30) = let k36(v31) = v30(v31, k34) in k36(b) in (let k37(v32) = let k38(v33) = v32(v33, k35) in k38(a) in k37(f)) in k33(v29) in k32(v28) in k31(v27)) in (let v15(m, k19) = let v16(n, k20) = let v17(f, k21) = let v18(x, k22) = let k23(v19) = let k24(v20) = v19(v20, k22) in (let k27(v23) = let k28(v24) = v23(v24, k24) in k28(x) in (let k29(v25) = let k30(v26) = v25(v26, k27) in k30(f) in k29(n))) in (let k25(v21) = let k26(v22) = v21(v22, k23) in k26(f) in k25(m)) in k21(v18) in k20(v17) in k19(v16) in k18(v15)) in (let v6(n, k9) = let v7(f, k10) = let v8(x, k11) = let k12(v9) = let k13(v10) = v9(v10, k11) in (let k14(v11) = let k15(v12) = v11(v12, k13) in k15(x) in (let k16(v13) = let k17(v14) = v13(v14, k14) in k17(f) in k16(n))) in k12(f) in k10(v8) in k9(v7) in k8(v6)) in (let v2(f, k4) = let v3(x, k5) = let k6(v4) = let k7(v5) = v4(v5, k5) in k7(x) in k6(f) in k4(v3) in k3(v2)) in (let v0(f, k1) = let v1(x, k2) = k2(x) in k1(v1) in k0(v0))

----------------

inc_cbv :: (Int, Int -> r) -> r
inc_cbv (n, k) = k (1 + n)

test_cbv = 
    cbv (\f -> f (inc_cbv, \x -> x (0, id)))

thunk :: a -> (a -> r) -> r
thunk x k = k x

inc_cbn :: (Int -> r, Int) -> r
inc_cbn (k, n) =
    inc_cbv (n, k)

test_cbn =
    cbn (\f -> f (thunk inc_cbn, \x -> x (id, 0)))

main :: IO ()
main = do
  print $ (test_cbn, test_cbv)
