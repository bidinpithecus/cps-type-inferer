-- Auto-generated by Main.hs
-- For input exp
-- This code works only for Church Encoding expressions
-- It will compute the ...
-- ... generated CPS translated expression Church enconding

-----------------------------------------------------------

cbn k = let k0(v0) = let v1(k1) = let v24(f, k24) = let v25(x, k25) = let k26(v26) = let v27(k27) = let k28(v28) = let v29(k29) = let k30(v30) = let v31(k31) = let k32(v32) = let v33(k33) = let k34(v34) = let v35(k35) = x(k35) in v34(v35, k33) in f(k34) in v32(v33, k31) in f(k32) in v30(v31, k29) in f(k30) in v28(v29, k27) in f(k28) in v26(v27, k25) in f(k26) in k24(v25) in k1(v24) in v0(v1, k) in (let k2(v2) = let v3(k3) = let v14(f, k14) = let v15(x, k15) = let k16(v16) = let v17(k17) = let k18(v18) = let v19(k19) = let k20(v20) = let v21(k21) = let k22(v22) = let v23(k23) = x(k23) in v22(v23, k21) in f(k22) in v20(v21, k19) in f(k20) in v18(v19, k17) in f(k18) in v16(v17, k15) in f(k16) in k14(v15) in k3(v14) in v2(v3, k0) in (let v4(b, k4) = let v5(n, k5) = let v6(f, k6) = let v7(x, k7) = let k8(v8) = let v9(k9) = x(k9) in v8(v9, k7) in (let k10(v10) = let v11(k11) = f(k11) in v10(v11, k8) in (let k12(v12) = let v13(k13) = b(k13) in v12(v13, k10) in n(k12))) in k6(v7) in k5(v6) in k4(v5) in k2(v4)))

cbv k = let k0(v0) = let k1(v1) = v0(v1, k) in (let v24(f, k24) = let v25(x, k25) = let k26(v26) = let k27(v27) = v26(v27, k25) in (let k28(v28) = let k29(v29) = v28(v29, k27) in (let k30(v30) = let k31(v31) = v30(v31, k29) in (let k32(v32) = let k33(v33) = v32(v33, k31) in (let k34(v34) = let k35(v35) = v34(v35, k33) in k35(x) in k34(f)) in k32(f)) in k30(f)) in k28(f)) in k26(f) in k24(v25) in k1(v24)) in (let k2(v2) = let k3(v3) = v2(v3, k0) in (let v14(f, k14) = let v15(x, k15) = let k16(v16) = let k17(v17) = v16(v17, k15) in (let k18(v18) = let k19(v19) = v18(v19, k17) in (let k20(v20) = let k21(v21) = v20(v21, k19) in (let k22(v22) = let k23(v23) = v22(v23, k21) in k23(x) in k22(f)) in k20(f)) in k18(f)) in k16(f) in k14(v15) in k3(v14)) in (let v4(b, k4) = let v5(n, k5) = let v6(f, k6) = let v7(x, k7) = let k8(v8) = let k9(v9) = v8(v9, k7) in k9(x) in (let k10(v10) = let k11(v11) = v10(v11, k8) in k11(f) in (let k12(v12) = let k13(v13) = v12(v13, k10) in k13(b) in k12(n))) in k6(v7) in k5(v6) in k4(v5) in k2(v4)))

-----------------------------------------------------------

inc_cbv :: (Int, Int -> r) -> r
inc_cbv (n, k) = k (1 + n)

test_cbv = 
    cbv (\f -> f (inc_cbv, \x -> x (0, id)))

thunk :: a -> (a -> r) -> r
thunk x k = k x

inc_cbn :: (Int -> r, Int) -> r
inc_cbn (k, n) =
    inc_cbv (n, k)

test_cbn =
    cbn (\f -> f (thunk inc_cbn, \x -> x (id, 0)))

main :: IO ()
main = do
  print $ (test_cbn, test_cbv)
