-- Auto-generated by Main.hs
-- For input s-combinator
-- This code works only for Church Encoding expressions
-- It will compute the ...
-- ... generated CPS translated expression Church enconding

-----------------------------------------------------------

cbn k = let v0(x, k0) = let v1(y, k1) = let v2(z, k2) = let k3(v3) = let v4(k4) = let k7(v7) = let v8(k8) = z(k8) in v7(v8, k4) in y(k7) in v3(v4, k2) in (let k5(v5) = let v6(k6) = z(k6) in v5(v6, k3) in x(k5)) in k1(v2) in k0(v1) in k(v0)

cbv k = let v0(x, k0) = let v1(y, k1) = let v2(z, k2) = let k3(v3) = let k4(v4) = v3(v4, k2) in (let k7(v7) = let k8(v8) = v7(v8, k4) in k8(z) in k7(y)) in (let k5(v5) = let k6(v6) = v5(v6, k3) in k6(z) in k5(x)) in k1(v2) in k0(v1) in k(v0)

-----------------------------------------------------------

inc_cbv :: (Int, Int -> r) -> r
inc_cbv (n, k) = k (1 + n)

test_cbv = 
    cbv (\f -> f (inc_cbv, \x -> x (0, id)))

thunk :: a -> (a -> r) -> r
thunk x k = k x

inc_cbn :: (Int -> r, Int) -> r
inc_cbn (k, n) =
    inc_cbv (n, k)

test_cbn =
    cbn (\f -> f (thunk inc_cbn, \x -> x (id, 0)))

main :: IO ()
main = do
  print $ (test_cbn, test_cbv)
