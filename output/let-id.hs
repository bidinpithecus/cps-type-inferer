-- Auto-generated by Main.hs
-- For input let-id
-- This code works only for Church Encoding expressions
-- It will compute the ...
-- ... generated CPS translated expression Church enconding

-----------------------------------------------------------

cbn k = let id(k0) = let v0(x, k1) = x(k1) in k0(v0) in (let k2(v1) = let v2(k3) = id(k3) in v1(v2, k) in id(k2))

cbv k = let k0(id) = let k2(v1) = let k3(v2) = v1(v2, k) in k3(id) in k2(id) in (let v0(x, k1) = k1(x) in k0(v0))

-----------------------------------------------------------

inc_cbv :: (Int, Int -> r) -> r
inc_cbv (n, k) = k (1 + n)

test_cbv = 
    cbv (\f -> f (inc_cbv, \x -> x (0, id)))

thunk :: a -> (a -> r) -> r
thunk x k = k x

inc_cbn :: (Int -> r, Int) -> r
inc_cbn (k, n) =
    inc_cbv (n, k)

test_cbn =
    cbn (\f -> f (thunk inc_cbn, \x -> x (id, 0)))

main :: IO ()
main = do
  print $ (test_cbn, test_cbv)
